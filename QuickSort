class QuickSort
  attr_reader :count
  def initialize(value)
    @array=value
    @count=0
  end
  def Sort(p,r)
    if p<r
      q=Partition(p,r)
      Sort(p,q-1)
      Sort(q+1,r)
    end
  end
  def Partition(p,r)
    if p==r
      return p
    end
    @i=p
    @j=r+1
    x=@array[p]
    while true
      @i+=1
      @count+=1
      while @i<@j&&@array[@i]!=nil&&x!=nil&&@array[@i]<x
        @count+=1
        @i+=1
      end
      @j-=1
      while @i<@j&&@array[@i]!=nil&&x!=nil&&@array[@j]>x
        @count+=1
        @j-=1
      end
      if @i >= @j
        break;
      end
      Swap(@i,@j)
    end
    @array[p]=@array[@j]
    @array[@j]=x
    return @j
  end
  def Swap(i,j)
    a=@array[i]
    @array[i]=@array[j]
    @array[j]=a
  end
  def PrintArray
    puts @array
  end
end
#产生随机数矩阵
class RadomArray
  def create(value)
    source=Array.new
    for i in 1..value
      source[i-1]=rand(value)
    end
    return source
  end
end
class Quick
  10.times do |i|
    a=RadomArray.new
    p=QuickSort.new(a.create((i+1)*100))
    p.Sort(0,(i+1)*100-1)
    puts "当数量为"+((i+1)*100).to_s+"时时间复杂度为:"+p.count.to_s
  end
end
